----------------------------------------------------------------------------------------------------------------------------------------------

Connecting to the Fabric Network in Node.js

----------------------------------------------------------------------------------------------------------------------------------------------
try 
  {
    // load the network configuration (This assumes the file structure )
    const ccpPath = path.resolve(__dirname, '..', 'crypto-config', 'peerOrganizations', 'org1.example.com', 'connectionprofile.json');
    const ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));

    // Create a new file system based wallet for managing identities.
    const walletPath = path.join(process.cwd(), '../wallet');
    const wallet = await Wallets.newFileSystemWallet(walletPath);

    // Check to see if we've already enrolled the user.
    const identity = await wallet.get('user');
    if (!identity) 
    {
      console.log('An identity for the user "user" does not exist in the wallet');
      exit;
    }

    // Create a new gateway for connecting to our peer node.
    const gateway = new Gateway();
    await gateway.connect(ccp, { wallet, identity: 'user', discovery: { enabled: false, asLocalhost: false } });

    // Get the network (channel) our contract is deployed to.
    const network = await gateway.getNetwork('mychannel');

    // Get the contract from the network.
    const contract = network.getContract('biodiversity');

    // Once the contract object is initialized, you can start evaluating queries and submitting transactions!
    // Here's how you can issue a sample query

    const result = await contract.evaluateTransaction(transactionName, parameter1, parameter2, ..., parameterN)

    // When you are done with the blockchain connection, disconnect from the gateway as shown below
    // Disconnect from the gateway.
    await gateway.disconnect();
        
  } 
  catch (error) 
  {
    console.error(`Failed to evaluate transaction: ${error}`);
    exit;
  }

----------------------------------------------------------------------------------------------------------------------------------------------

JSON Objects and Their Fields

---Format---

Object Name

Object fields as list of {name (type) : description}

----------------------------------------------------------------------------------------------------------------------------------------------

Specimen

collection      (string) : name of the collection which the specimen belongs to
updater         (string) : username of the user who made the most recent update to the specimen
catalogNumber   (string) : catalog number of specimen
accessionNumber (string) : accession number of specimen
catalogDate     (string) : catalog date of specimen
cataloger       (string) : name of specimen cataloger
taxon           (string) : specimen taxon in Genus Species format
determiner      (string) : name of taxon determiner
determineDate   (string) : date of taxon determination
fieldNumber     (string) : field number of specimen
fieldDate       (string) : field date of specimen
collector       (string) : name of field collector
location        (string) : description of field location, typically includes country and city
latitude        (string) : latitude of field location
longitude       (string) : longitude of field location
habitat         (string) : description of the habitat of field location
preparation     (string) : description of specimen preparation type
condition       (string) : append-only list of changes to specimen condition
loans           (string) : append-only list of loaned specimen parts
grants          (string) : append-only list of granted specimen parts
notes           (string) : append-only list of auxiliary notes and acknowledgements
image           (string) : hash of the base64 encoding of an uploaded specimen image

----------------------------------------------------------------------------------------------------------------------------------------------

QueryResult

guid        (string)    : globally unique identifier of specimen (primary key)
specimen    (Specimen)  : JSON Specimen object corresponding to guid

----------------------------------------------------------------------------------------------------------------------------------------------

Collection

name            (string)  : unique name of collection (primary key)
createSpecimen  (string)  : which roles have the permission to create new specimens (should be a substring of "MCASP")
primaryUpdate   (string)  : which roles have the permission to update specimen primary info (should be a substring of "MCASP")
secondaryUpdate (string)  : which roles have the permission to update specimen secondary info (should be a substring of "MCASP")
georeference    (string)  : which roles have the permission to update specimen geolocation info (should be a substring of "MCASP")
linkImages      (string)  : which roles have the permission to link specimen images (should be a substring of "MCASP")
linkAuxiliary   (string)  : which roles have the permission to link other auxiliary data (e.g. bird song recordings) (should be a substring of "MCASP")
taxonName       (string)  : which roles have the permission to update individual specimen taxons (should be a substring of "MCASP")
taxonClass      (string)  : which roles have the permission to globally update a taxon class (e.g. replace all instances of one taxon with another) (should be a substring of "MCASP")
suggestTaxon    (string)  : which roles have the permission to suggest updates to individual specimen taxons (should be a substring of "MCASP")
registerLoan    (string)  : which roles have the permission to register loaned parts of specimens (should be a substring of "MCASP")
registerUse     (string)  : which roles have the permission to register granted parts of specimens (should be a substring of "MCASP")
query           (string)  : which roles have the permission to query individual specimens (should be a substring of "MCASP")
flagError       (string)  : which roles have the permission to flag errors and suggest updates to specimens (should be a substring of "MCASP")

----------------------------------------------------------------------------------------------------------------------------------------------

User

username    (string)              : unique username of user (primary key)
membership  ( {string: string} )  : map object which maps collection names to the user's role in that collection (role is either "M", "C", "A", "S", or "P")

----------------------------------------------------------------------------------------------------------------------------------------------

PendingTransaction

transaction (string)      : name of pending transaction (e.g. "Update")
arguments   ( [string] )  : string array of pending transaction arguments
suggester   (string)      : username of user who suggested the pending transaction
reason      (string)      : user supplied reason as to why they suggested the pending transaction

----------------------------------------------------------------------------------------------------------------------------------------------

Queries and Transactions Available

Note: parameters are ALWAYS passed as strings

---Format---

Query/Transaction Name

Description

Parameters as list of {name : description}

Sample Usage(s) in Node.js
Note: If a query or transaction fails, an error will be thrown. Make sure to execute queries and transactions in try/catch blocks

----------------------------------------------------------------------------------------------------------------------------------------------

Query

Queries a single specimen and returns it as a JSON Specimen object

guid      : globally unique identifier for the target specimen
username  : username of user issueing query (used to check permissions)

const specimen = await contract.evaluateTransaction('Query', guid, username);

----------------------------------------------------------------------------------------------------------------------------------------------

QueryAllSpecimens

Fetches all specimens and their guids, returning them as an array of JSON QueryResult objects

No Parameters

const allSpecimens = await contract.evaluateTransaction('QueryAllSpecimens');

----------------------------------------------------------------------------------------------------------------------------------------------

CouchQuery

Fetches all specimens that result from a CouchDB query string and returns them as an array of JSON Specimen objects

queryString : CouchDB formatted query string

const querySpecimens = await contract.evaluateTransaction('CouchQuery', '{"selector":{"taxon":"Pygoplites diacanthus"}}')

----------------------------------------------------------------------------------------------------------------------------------------------

GetHistory

Fetches the entire ledger history of a specified key and returns it as a JSON array of objects in the format {TxID, Value, Timestamp, IsDelete}
Note: Value will be JSON object whose type depends on the specified key

key : key of the object to fetch the entire ledger history of

//get history of a specimen
const specimenHistory = await contract.evaluateTransaction('GetHistory', guid)

//get history of a user's memberships
const membershipHistory = await contract.evaluateTransaction('GetHistory', username)

//get history of a user's contributions
const contributionHistory = await contract.evaluateTransaction('GetHistory', username + '|attribution')

//get history of a collection's permission rules
const collectionHistory = await contract.evaluateTransaction('GetHistory', collection)

----------------------------------------------------------------------------------------------------------------------------------------------

RegisterCollection

Registers a new biodiversity collection and assigns the user issuing this transaction the role of collection manager
Note: each parameter other than name and username must be a substring of "MCASP"

name            : name of the collection
username        : username of the individual creating the collection who will become the collection manager of that collection
createSpecimen  : which roles have the permission to create new specimens
primaryUpdate   : which roles have the permission to update specimens' primary info
secondaryUpdate : which roles have the permission to update specimens' secondary info
georeference    : which roles have the permission to update specimens' geolocation info
linkImages      : which roles have the permission to upload specimens' images
linkAuxiliary   : which roles have the permission to upload other auxiliary info for specimens (e.g. bird song recordings)
taxonName       : which roles have the permission to update individual specimen's taxon names
taxonClass      : which roles have the permission to globally update a taxon class (e.g. replace all instances of one taxon with another)
suggestTaxon    : which roles have the permission to suggest updates to individual specimen taxons
registerLoan    : which roles have the permission to register loaned parts of specimens
registerUse     : which roles have the permission to register granted parts of specimens
query           : which roles have the permission to query individual specimens
flagError       : which roles have the permission to flag errors and suggest updates to specimens

await contract.submitTransaction('RegisterCollection', name, username, createSpecimen, primaryUpdate, secondaryUpdate, georeference, linkImages, linkAuxiliary, taxonName, taxonClass, suggestTaxon, registerLoan, registerUse, query, flagError)

----------------------------------------------------------------------------------------------------------------------------------------------

UpdateCollection

Updates the permission rules of the specified collection
Note: each parameter other than name and username must be a substring of "MCASP"
Note: permission rules parameters that are blank (param == "") indicates that no change should be made to the existing permission rule

name            : name of the collection to be updated
username        : username of the individual attempting to update the collection's permission rules (must be the collection manager or transaction will fail)
createSpecimen  : which roles have the permission to create new specimens
primaryUpdate   : which roles have the permission to update specimens' primary info
secondaryUpdate : which roles have the permission to update specimens' secondary info
georeference    : which roles have the permission to update specimens' geolocation info
linkImages      : which roles have the permission to upload specimens' images
linkAuxiliary   : which roles have the permission to upload other auxiliary info for specimens (e.g. bird song recordings)
taxonName       : which roles have the permission to update individual specimen's taxon names
taxonClass      : which roles have the permission to globally update a taxon class (e.g. replace all instances of one taxon with another)
suggestTaxon    : which roles have the permission to suggest updates to individual specimen taxons
registerLoan    : which roles have the permission to register loaned parts of specimens
registerUse     : which roles have the permission to register granted parts of specimens
query           : which roles have the permission to query individual specimens
flagError       : which roles have the permission to flag errors and suggest updates to specimens

await contract.submitTransaction('UpdateCollection', name, username, createSpecimen, primaryUpdate, secondaryUpdate, georeference, linkImages, linkAuxiliary, taxonName, taxonClass, suggestTaxon, registerLoan, registerUse, query, flagError)

----------------------------------------------------------------------------------------------------------------------------------------------

RegisterUser

Registers a new user on the blockchain with the provided username and initializes them with an empty collection membership map

username  : username of the new user to be registered (must be unique or transaction will fail)

await contract.submitTransaction('RegisterUser', username)

----------------------------------------------------------------------------------------------------------------------------------------------

GrantPermission

Grants a specified user a specified role within a specified biodiversity collection

granterName : username of the individual granting a permission role to another user (must have role "M" or "C" for the specified collection or this transaction will fail)
username    : username of the individual receiving a permission role
collection  : name of collection for which the permission role is being granted
permission  : permission role to be granted (must be either "M", "C", "A", "S", or "P". granters with role "C" cannot grant role "M" and cannot demote users with role "M")

await contract.submitTransaction('GrantPermission', granterName, username, collection, permission)

----------------------------------------------------------------------------------------------------------------------------------------------

Create

Creates a new specimen in a given biodiversity collection
Note: It is okay to leave parameters which correspond to specimen info blank (param == "")

guid            : globally unique identifier for specimen (must be unique)
collection      : name of the collection which the specimen is being created in
updater         : username of the user who is creating the specimen (updater's role must be within the given collection's createSpecimen permission rule or transaction will fail)
catalogNumber   : catalog number of specimen
accessionNumber : accession number of specimen
catalogDate     : catalog date of specimen
cataloger       : name of specimen cataloger
taxon           : specimen taxon in Genus Species format
determiner      : name of taxon determiner
determineDate   : date of taxon determination
fieldNumber     : field number of specimen
fieldDate       : field date of specimen
collector       : name of field collector
location        : description of field location, typically includes country and city
latitude        : latitude of field location
longitude       : longitude of field location
habitat         : description of the habitat of field location
preparation     : description of specimen preparation type
condition       : initial entries in append-only list of changes to specimen condition
notes           : initial entires in append-only list of auxiliary notes and acknowledgements
image           : hash of the base64 encoding of an uploaded specimen image

await contract.submitTransaction('Create', guid, collection, updater, catalogNumber, accessionNumber, catalogDate, cataloger, taxon, determiner, determineDate, fieldNumber, fieldDate, collector, location, latitude, longitude, habitat, preparation, condition, notes, image)

----------------------------------------------------------------------------------------------------------------------------------------------

Update

Updates information relating to a specimen in a given biodiversity collection
Note: specimen info parameters left blank (param == "") indicates that no change will be made to that specific field

guid            : globally unique identifier for specimen (must already exist)
collection      : collection which the specimen belongs to (currently, transferring specimens to other collections is not permitted)
updater         : username of the user who is updating the specimen's info (updater's role must be within the given collection's permission rules according to what fields they update)
catalogNumber   : catalog number of specimen
accessionNumber : accession number of specimen
catalogDate     : catalog date of specimen
cataloger       : name of specimen cataloger
taxon           : specimen taxon in Genus Species format
determiner      : name of taxon determiner
determineDate   : date of taxon determination
fieldNumber     : field number of specimen
fieldDate       : field date of specimen
collector       : name of field collector
location        : description of field location, typically includes country and city
latitude        : latitude of field location
longitude       : longitude of field location
habitat         : description of the habitat of field location
preparation     : description of specimen preparation type
condition       : new entry in append-only list of changes to specimen condition
conditionDate   : date of change to specimen condition
notes           : new entry in append-only list of auxiliary notes and acknowledgements
image           : hash of the base64 encoding of an uploaded specimen image

await contract.submitTransaction('Update', guid, collection, updater, catalogNumber, accessionNumber, catalogDate, cataloger, taxon, determiner, determineDate, fieldNumber, fieldDate, collector, location, latitude, longitude, habitat, preparation, condition, conditionDate, notes, image)

---------------------------------------------------------------------------------------------------------------------------------------------

UpdateTaxonClass

Globally updates all instances of one taxon to another within a given biodiversity collection and returns a count of how many records were altered

collection  : collection for which all instances of oldTaxon will be replaced with instances of newTaxon
username    : username of the user who is updating all instances of a taxon class (user's role must be within the given collection's permission rules for taxonClass or the transaction will fail)
oldTaxon    : old taxon that will be replaced
newTaxon    : new taxon that will replace all instances of the old taxon

const recordsAltered = await contract.submitTransaction('UpdateTaxonClass', username, oldTaxon, newTaxon)

----------------------------------------------------------------------------------------------------------------------------------------------

RegisterLoan

Regiseters a loan of a part of a specimen and updates the loans append-only list for that specimen

guid        : globally unique identifier for specimen (must already exist)
username    : username of user registering the loan (user's role must be within the specimen's collection permission rules for registerLoan or the transaction will fail)
description : description of what part of the specimen is being loaned
loanee      : name of individual or organization receiving the loan
date        : date of loan transfer

await contract.submitTransaction('RegisterLoan', guid, username, description, loanee, date)

----------------------------------------------------------------------------------------------------------------------------------------------

ReturnLoan

Returns a loan of a part of a specimen and updates the loans append-only list for that specimen

guid        : globally unique identifier for specimen (must already exist)
username    : username of user registering the return of the loan (user's role must be within the specimen's collection permission rules for registerLoan or the transaction will fail)
description : description of what part of the specimen was loaned and now returned
loanee      : name of individual or organization who received the loan that is now returned
date        : date of loan return

await contract.submitTransaction('ReturnLoan', guid, username, description, loanee, date)

----------------------------------------------------------------------------------------------------------------------------------------------

RegisterGrant

Registers a grant of a part of a specimen and updates the grants append-only list for that specimen

guid        : globally unique identifier for specimen (must already exist)
username    : username of user registering the grant (user's role must be within the specimen's collection permission rules for registerUse or the transaction will fail)
description : description of what part of the specimen is being granted 
grantee     : name of individual or organization receiving the grant
date        : date of grant transfer

await contract.submitTransaction('RegisterGrant', guid, username, description, grantee, date)

----------------------------------------------------------------------------------------------------------------------------------------------

Override

Override the content of one or more append-only list fields for a given specimen
Note: override target parameters left blank (param == "") indicates that no change should be made to the corresponding append-only list
Note: override target parameters set to None (param == "None") indicates that the corresponding append-only list should be set to an empty string ("")

guid      : globally unique identifier for specimen (must already exist)
username  : username of the user overriding one or more append-only list fields of the specimen (user's roles must be within the given collection's permission rules for primaryUpdate or the transaction will fail)
condition : override target for condition append-only list
loans     : override target for loans append-only list
grants    : override target for grants append-only list
notes     : override target for notes append-only list

await contract.submitTransaction('Override', guid, username, condition, loans, grants, notes)

----------------------------------------------------------------------------------------------------------------------------------------------

SuggestUpdate

Creates a PendingTransaction suggesting an update to a specific specimen and appends it to that specimen's current list of PendingTransactions

guid            : globally unique identifier for specimen (must already exist)
collection      : collection which the specimen belongs to (currently, transferring specimens to other collections is not permitted)
updater         : username of the user who is suggesting updating the specimen's info (user's role must be within the given collection's permission rules for flagError or the transaction will fail)
catalogNumber   : catalog number of specimen
accessionNumber : accession number of specimen
catalogDate     : catalog date of specimen
cataloger       : name of specimen cataloger
taxon           : specimen taxon in Genus Species format
determiner      : name of taxon determiner
determineDate   : date of taxon determination
fieldNumber     : field number of specimen
fieldDate       : field date of specimen
collector       : name of field collector
location        : description of field location, typically includes country and city
latitude        : latitude of field location
longitude       : longitude of field location
habitat         : description of the habitat of field location
preparation     : description of specimen preparation type
condition       : new entry in append-only list of changes to specimen condition
conditionDate   : date of change to specimen condition
notes           : new entry in append-only list of auxiliary notes and acknowledgements
image           : hash of the base64 encoding of an uploaded specimen image
reason          : description of why the update is suggested

await contract.submitTransaction('SuggestUpdate', guid, collection, updater, catalogNumber, accessionNumber, catalogDate, cataloger, taxon, determiner, determineDate, fieldNumber, fieldDate, collector, location, latitude, longitude, habitat, preparation, condition, conditionDate, notes, image, reason)

----------------------------------------------------------------------------------------------------------------------------------------------

ApproveTransaction

Approves a PendingTransaction for a given specimen and removes the PendingTransaction from that specimen's current list of PendingTransactions

guid              : guid of the specimen for which the PendingTransaction will be approved
username          : username of the user approving the PendingTransaction (user must have a role which could initiate the PendingTransaction or the transaction will fail)
transactionIndex  : index within the list of pending transactions corresponding to the pending transaction that should be approved (the oldest PendingTransaction will have index 0)

await contract.submitTransaction('ApproveTransaction', guid, username, '0')

----------------------------------------------------------------------------------------------------------------------------------------------

DenyTransaction

Denies a PendingTransaction for a given specimen and removes it from that specimen's current list of PendingTransactions

guid              : guid of the specimen for which the PendingTransaction will be denied
username          : username of the user denying the PendingTransaction (user must have a role which can update specimen primary info for the collection which the specimen belongs to)
transactionIndex  : index within the list of pending transactions corresponding to the pending transaction that should be denied (the oldest PendingTransaction will have index 0)

await contract.submitTransaction('DenyTransaction', guid, username '0')

----------------------------------------------------------------------------------------------------------------------------------------------